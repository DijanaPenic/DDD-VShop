trigger:
- test-pipeline-task

pool:
  vmImage: 'ubuntu-latest'

variables:
  projects: '**/*.sln'
  buildConfiguration: 'debug'
  envFile: 'test.env'

steps:
- task: DownloadSecureFile@1
  displayName: 'Download .env file'
  inputs:
    secureFile: $(envFile)
- task: DockerCompose@0
  displayName: Start dependencies (docker-compose)
  inputs:
    containerregistrytype: Container Registry
    dockerComposeFile: '**/docker-compose.yml'
    dockerComposeCommand: '--env-file=$(envFile) up -d'
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 6.x'
  inputs:
    packageType: sdk
    version: 6.x
    installationPath: $(Agent.ToolsDirectory)/dotnet
- task: DotNetCoreCLI@2
  displayName: Restore nuget packages
  inputs:
    command: restore
    feedsToUse: 'select'
    projects: $(projects)
    workingDirectory: $(System.DefaultWorkingDirectory)
- task: DotNetCoreCLI@2
  displayName: 'Build application'
  inputs:
    command: build
    projects: $(projects)
    arguments: '--configuration $(buildConfiguration) --no-restore'
    workingDirectory: $(System.DefaultWorkingDirectory)
- task: DotNetCoreCLI@2
  displayName: 'Test application'
  inputs:
    command: test
    projects: $(projects)
    arguments: '--configuration $(buildConfiguration)'
    workingDirectory: $(System.DefaultWorkingDirectory)
- task: DotNetCoreCLI@2
  displayName: 'Publish application'
  inputs:
    command: publish
    nobuild: true
    projects: $(projects)
    arguments: '--output $(Build.ArtifactStagingDirectory)/output'
    publishWebProjects: false
    zipAfterPublish: true
    modifyOutputPath: true
    workingDirectory: $(System.DefaultWorkingDirectory)
- task: CopyFiles@2
  displayName: 'Prepare docker'
  inputs:
    contents: '$(System.DefaultWorkingDirectory)/devops/**'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishPipelineArtifact@1
  displayName: 'Publish pipeline artifact'
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)
    artifact: 'publish-$(buildConfiguration)'
    publishLocation: 'pipeline'